{"version":3,"sources":["Components/MainPage.jsx","Components/NeighborDesk.jsx","Components/Form.jsx","Components/OfficePage.jsx","Components/StaffSearch.jsx","App.js","serviceWorker.js","index.js"],"names":["MainPage","useState","offices","setOffice","useEffect","fetch","then","res","json","data","patt","map","office","name","Name","replace","key","className","to","Location","src","alt","NeighborDesk","props","proximity","setProxy","checkNeighbor","setCheckNeighbor","checkedIn","checkedOut","officeName","checkNeighborDesk","time","number","parseInt","match","neighborDesk","forEach","cita","NcheckedOut","Date","CheckedOut","substring","length","NcheckIn","CheckedIn","getTime","style","display","width","margin","type","onClick","fontSize","marginLeft","target","Form","email","setEmail","setCheckOut","setCheckIn","validate","valid","i","appointments","color","onChange","e","exec","value","out","now","timeIn","test","url","method","headers","Accept","body","JSON","stringify","location","site","standUp","getFullYear","getMonth","getDate","getHours","getMinutes","image","document","reload","OfficePage","d","useParams","schedule","setSchedule","setStand","available","setAvailable","setLocation","setSite","setImage","setAppointment","title","Site","StandUp","ImagePath","schedules","index","months","checkIn","ID","StaffName","href","StaffSearch","staff","setStaff","setOffices","inTo","App","Fragment","exact","path","render","console","log","Boolean","window","hostname","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c6d8d4a0.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function MainPage() {\r\n    let [offices, setOffice] = useState([])\r\n    \r\n    useEffect(() => {\r\n        fetch(\"http://bmss-devops.bmss.com/checkout\")\r\n            .then(res => {\r\n                return res.json()\r\n            }).then(data => {\r\n                let patt = /\\s/g\r\n                let offices = data.map((office) => {\r\n                    let name = office.Name.replace(patt, \"_\")\r\n                    return (\r\n                        <li key={office.Name} className=\"hero-list\">\r\n                            <Link to={`/checkout/${name}`}>\r\n                                {office.Name}\r\n                            </Link>\r\n                            <p>{office.Location}</p>\r\n                        </li>\r\n                    )\r\n                })\r\n                setOffice(offices)\r\n            })\r\n    })\r\n\r\n    return (\r\n        <section className=\"main\">\r\n            <article className=\"main-pics\">\r\n                <img src=\"https://i.imgur.com/suuNAu0.png\" alt=\"ROR First Floor Plan\" />\r\n                <br></br>\r\n                <img src=\"https://i.imgur.com/ANjwtOm.png\" alt=\"ROR Second Floor Plan\" />\r\n            </article>\r\n            <article className=\"main-list\">\r\n                <ul>\r\n                    {offices}\r\n                </ul>\r\n            </article>\r\n            \r\n        </section>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function NeighborDesk(props) {\r\n    let [proximity, setProxy] = useState(false)\r\n    let {checkNeighbor, setCheckNeighbor, checkedIn, checkedOut, officeName} = props\r\n\r\n    const checkNeighborDesk = (time) => {\r\n        let number = parseInt(officeName.match(/\\d+/g))\r\n        if (number % 2 === 0) {\r\n            let neighborDesk = `Upstairs_Workstation_${number - 1}`\r\n            fetch(`http://bmss-devops.bmss.com/checkout/${neighborDesk}`)\r\n                .then(res => {\r\n                    return res.json()\r\n                }).then(data => {\r\n                    data.forEach(cita => {\r\n                        let NcheckedOut = new Date(cita.CheckedOut.substring(0, cita.CheckedOut.length - 5))\r\n                        let NcheckIn = new Date(cita.CheckedIn.substring(0, cita.CheckedIn.length - 5))\r\n                        if (time.getTime() >= NcheckedOut.getTime() && time.getTime() <= NcheckIn.getTime()) {\r\n                            setCheckNeighbor(!checkNeighbor)\r\n                            setProxy(true)\r\n                            return\r\n                        }\r\n                    })\r\n                })\r\n        } else {\r\n            let neighborDesk = `Upstairs_Workstation_${number + 1}`\r\n            fetch(`http://bmss-devops.bmss.com/checkout/${neighborDesk}`)\r\n                .then(res => {\r\n                    return res.json()\r\n                }).then(data => {\r\n                    data.forEach(cita => {\r\n                        let NcheckedOut = new Date(cita.CheckedOut.substring(0, cita.CheckedOut.length - 5))\r\n                        let NcheckIn = new Date(cita.CheckedIn.substring(0, cita.CheckedIn.length - 5))\r\n                        if (time.getTime() >= NcheckedOut.getTime() && time.getTime() <= NcheckIn.getTime()) {\r\n                            setCheckNeighbor(!checkNeighbor)\r\n                            setProxy(true)\r\n                            return\r\n                        }\r\n                    })\r\n                })\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (checkedIn !== \"\" && checkedOut !== \"\") {\r\n            checkNeighborDesk(checkedIn)\r\n            checkNeighborDesk(checkedOut)\r\n        }\r\n    }, [checkedIn, checkedOut, officeName])\r\n    \r\n    return (\r\n        <article style={proximity ? {display: 'block', width: '50%', margin: '0 auto'} : {display: 'none'}}>\r\n                    <input type=\"checkbox\" onClick={() => {\r\n                        setCheckNeighbor(true)\r\n                    }}/>\r\n                    <label style={{fontSize: '11px', marginLeft: '5px'}}>I understand that the <Link to={parseInt(officeName.match(/\\d+/g)) % 2 === 0 ? `/checkout/Upstairs_Workstation_${parseInt(officeName.match(/\\d+/g)) - 1}` : `/checkout/Upstairs_Workstation_${parseInt(officeName.match(/\\d+/g)) + 1}`} target=\"_blank\">neighboring desk</Link> is checked out during this time and have checked with that staff member to make sure they are comfortable working within 6 feet.</label>\r\n        </article>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport NeighborDesk from './NeighborDesk';\r\n\r\nexport default function Form(props) {\r\n    let [email, setEmail] = useState(\"\")\r\n    let [checkedOut, setCheckOut] = useState(\"\")\r\n    let [checkedIn, setCheckIn] = useState(\"\")\r\n    let [checkNeighbor, setCheckNeighbor] = useState(true)\r\n\r\n    const submit = () => {\r\n        fetch(`http://bmss-devops.bmss.com/checkout/${props.url}`, {\r\n            method: \"POST\",\r\n            headers: {\r\n                Accept: \"application/json\",\r\n                \"Content-Type\": \"application/json\"\r\n              },\r\n            body: JSON.stringify({\r\n                email: email, \r\n                name: props.officeName, \r\n                location: props.location, \r\n                site: props.site, \r\n                standUp: props.standUp === \"No\" ? 0 : 1, \r\n                checkedOut: `${checkedOut.getFullYear()}-${checkedOut.getMonth() + 1}-${checkedOut.getDate()} ${checkedOut.getHours()}:${checkedOut.getMinutes()}:00`, \r\n                checkedIn: `${checkedIn.getFullYear()}-${checkedIn.getMonth() + 1}-${checkedIn.getDate()} ${checkedIn.getHours()}:${checkedIn.getMinutes()}:00`,\r\n                image: props.image\r\n            })\r\n        })\r\n        document.location.reload()\r\n    }\r\n\r\n    const validate = (time) => {\r\n        let valid = true;\r\n        for (let i = 0; i < props.appointments.length; i++) {\r\n            if (time > props.appointments[i].checkedIn || time < props.appointments[i].checkedOut) {\r\n                valid = false;\r\n            }\r\n        }\r\n        return valid\r\n    } \r\n\r\n    return (\r\n        <div>\r\n            <h3>Checkout {props.officeName}:</h3>\r\n            <p style={{fontSize: 10, color: \"gray\"}}>All fields are required</p>\r\n            <label>BMSS Email:\r\n                <br></br>\r\n                <input type=\"text\" onChange={(e) => {\r\n                    if (/\\w+@bmss.com\\b/.exec(e.target.value)) {\r\n                        setEmail(e.target.value)\r\n                    }\r\n                }}/>\r\n                <br></br>\r\n                <p className={email.length > 1 ? \"hidden\" : \"warning\"}>Please enter a valid BMSS email!</p>\r\n            </label>\r\n\r\n            <label>Checkout Date:\r\n                <br></br>\r\n                <input type=\"datetime-local\" onChange={(e) => {\r\n                    let out = new Date(e.target.value)\r\n                    if ((props.appointments.length === 0 || validate(out)) && out.getTime() - Date.now() < 1296000000) {\r\n                        setCheckOut(out)\r\n                    }\r\n                }}/>\r\n                <br></br>\r\n                <p className={checkedOut !== \"\" && checkedOut.getTime() - Date.now() < 1296000000 ? \"hidden\" : \"warning\"}>Please enter a valid time to check this office out!</p>\r\n            </label>\r\n\r\n            <label>Checkin Date:\r\n                <br></br>\r\n                <input type=\"datetime-local\" onChange={e => {\r\n                    let timeIn = new Date(e.target.value)\r\n                    if ((props.appointments.length === 0 || validate(timeIn)) && timeIn.getTime() > checkedOut.getTime()) {\r\n                        setCheckIn(timeIn)\r\n                        }\r\n                    }} />\r\n                <p className={checkedIn !== \"\" && checkedIn.getTime() - checkedOut.getTime() < 604800000 ? \"hidden\" : \"warning\"}>Please enter a valid time to check this office in!</p>\r\n            </label>\r\n            {/Upstairs Workstation/.test(props.officeName) ? \r\n                (<div>\r\n                    <NeighborDesk setCheckNeighbor={setCheckNeighbor} checkNeighbor={checkNeighbor} checkedIn={checkedIn} checkedOut={checkedOut} officeName={props.officeName} />\r\n                </div>) : \r\n                <br></br>}\r\n            <button className={email.length > 1 && checkedOut !== \"\" && checkedIn !== \"\"  && checkNeighbor && checkedIn.getTime() - checkedOut.getTime() < 604800000 ? \"valid\" : \"invalid\"} onClick={() => {\r\n                if (email.length > 1 && checkedOut !== \"\" && checkedIn !== \"\"  && checkNeighbor && checkedIn.getTime() - checkedOut.getTime() < 604800000) {\r\n                    submit()\r\n                }\r\n            }}>Checkout</button>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport Form from './Form';\r\n\r\nexport default function OfficePage() {\r\n    let d = new Date()\r\n    let { office } = useParams();\r\n    let [schedule, setSchedule] = useState([]);\r\n    let [standUp, setStand] = useState(\"\");\r\n    let [available, setAvailable] = useState(\"Yes\");\r\n    let [location, setLocation] = useState(\"\");\r\n    let [site, setSite] = useState(\"\");\r\n    let [image, setImage] = useState(\"\");\r\n    let [appointments, setAppointment] = useState([]);\r\n    \r\n    let patt = /_/g\r\n    let name = office.replace(patt, \" \")\r\n\r\n    useEffect(() => {\r\n        document.title = name\r\n        fetch(`http://bmss-devops.bmss.com/checkout/${office}`)\r\n            .then(res => {\r\n                return res.json()\r\n            })\r\n            .then(data => {\r\n                setSite(data[0].Site)\r\n                setLocation(data[0].Location)\r\n                setStand(data[0].StandUp === 0 ? \"No\" : \"Yes\")\r\n                setImage(data[0].ImagePath)\r\n                let schedules = data.map((schedule, index) => {\r\n                    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n                    let checkedOut = new Date(schedule.CheckedOut.substring(0, schedule.CheckedOut.length - 5))\r\n                    let checkIn = new Date(schedule.CheckedIn.substring(0, schedule.CheckedIn.length - 5))\r\n                    if (checkedOut <= d && checkIn >= d) {\r\n                        setAvailable(\"No\")\r\n                    }\r\n                    if (checkIn >= d) {\r\n                        setAppointment([...appointments, {checkedOut: checkedOut, checkIn: checkIn}])\r\n                        return (\r\n                            <li key={schedule.ID}>{months[checkedOut.getMonth()]} {checkedOut.getDate()}, {checkedOut.getFullYear()} at {checkedOut.getHours() > 12 ? checkedOut.getHours() - 12 : checkedOut.getHours()}:{checkedOut.getMinutes() < 10 ? `0${checkedOut.getMinutes()}` : checkedOut.getMinutes()} {checkedOut.getHours() >= 12 ? 'PM' : 'AM'} until {months[checkIn.getMonth()]} {checkIn.getDate()}, {checkIn.getFullYear()} at {checkIn.getHours() > 12 ? checkIn.getHours() - 12 : checkIn.getHours()}:{checkIn.getMinutes() < 10 ? `0${checkIn.getMinutes()}` : checkIn.getMinutes()} {checkIn.getHours() >= 12 ? 'PM' : 'AM'} - {schedule.StaffName}</li>\r\n                        )\r\n                    } else if (checkIn < d && index === data.length - 1) {\r\n                        return (\r\n                            <li key='empty'>No upcoming checkouts</li>\r\n                        )\r\n                    }\r\n                })\r\n                setSchedule(schedules)\r\n            }) \r\n    })\r\n\r\n    return (\r\n        <section className=\"office-page\">\r\n            <article className=\"office-detail\">\r\n                <a href={image}><img src={image} alt=\"Office Location\" /></a>\r\n                <h1>{name}</h1>\r\n                <h3>Available: {available}</h3>\r\n                <h3>Stand Up: {standUp}</h3>\r\n                <p>{site} - {location}</p>\r\n            </article>\r\n            <article className=\"office-schedule\">\r\n                <h3>Upcoming Schedule:</h3>\r\n                <ul>{schedule}</ul>\r\n                <Form url={office} officeName={name} location={location} site={site} standUp={standUp} appointments={appointments} image={image} />\r\n            </article>\r\n            </section>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nexport default function StaffSearch() {\r\n    let [staff, setStaff] = useState(\"\")\r\n    let [offices, setOffices] = useState([])\r\n\r\n    useEffect(() => {\r\n        let patt = /\\s/g\r\n        fetch(`http://bmss-devops.bmss.com/staff/${staff.replace(patt, \"_\")}`)\r\n            .then(res => {\r\n                return res.json()\r\n            }).then(data => {\r\n                if (data.length > 0) {\r\n                    let offices = data.map(office => {\r\n                        let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n                        let out = new Date(office.CheckedOut.substring(0, office.CheckedIn.length - 5))\r\n                        let inTo = new Date(office.CheckedIn.substring(0, office.CheckedIn.length - 5))\r\n                        return (\r\n                            <li key={office.ID}>\r\n                                <h4>{office.StaffName}</h4>\r\n                                <p>{office.Name}</p>\r\n                                <p>From <strong>{months[out.getMonth()]} {out.getDate()}, {out.getFullYear()} at {out.getHours() > 12 ? out.getHours() - 12 : out.getHours()}:{out.getMinutes() < 10 ? `0${out.getMinutes()}` : out.getMinutes()} {out.getHours() >= 12 ? 'PM' : 'AM'}</strong><br></br> Until <strong>{months[inTo.getMonth()]} {inTo.getDate()}, {inTo.getFullYear()} at {inTo.getHours() > 12 ? inTo.getHours() - 12 : inTo.getHours()}:{inTo.getMinutes() < 10 ? `0${inTo.getMinutes()}` : inTo.getMinutes()} {inTo.getHours() >= 12 ? 'PM' : 'AM'}</strong></p>\r\n                            </li>\r\n                        )\r\n                    })\r\n                    setOffices(offices)\r\n                } else {\r\n                    let offices = <li>No offices checked out</li>\r\n                    setOffices(offices)\r\n                }\r\n            })\r\n    })\r\n\r\n    return (\r\n        <section className=\"staff\">\r\n            <article className=\"main-staff\">\r\n                <h3>Search for a Staff:</h3>\r\n                <input type=\"text\" onChange={(e) => {\r\n                    setStaff(e.target.value)\r\n                }} />\r\n            </article>\r\n            <article className=\"staff-list\">\r\n                <ul>\r\n                    {offices}\r\n                </ul>\r\n            </article>\r\n           \r\n        </section>\r\n    )\r\n}\r\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport './App.css';\nimport MainPage from './Components/MainPage';\nimport OfficePage from './Components/OfficePage';\nimport StaffSearch from './Components/StaffSearch';\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Router>\n        <nav>\n          <Link to=\"/\">Open Offices</Link>\n          <Link to=\"/staff\">Find a Staff</Link>\n        </nav>\n        <Switch>\n          <Route exact path=\"/\" render={() => (\n            <MainPage />\n          )} />\n          <Route exact path=\"/checkout/:office\" render={() => (\n            <OfficePage />\n          )} />\n          <Route exact path=\"/staff\" render={() => (\n            <StaffSearch />\n          )} />\n        </Switch>\n      </Router>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n\nlet d = new Date('2020-06-08 00:00:00')\nlet e = new Date('2020-06-23 00:00:00')\nconsole.log(e.getTime() - d.getTime())\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}